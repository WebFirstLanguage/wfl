// 5. Action (Function) Definition and Call Tests - with file logging

// 5.0  Logging helper (MUST come first)
// Open the log file (will be truncated/created anew)
open file at "nexus.log" as logHandle

// Helper: Append a message line to the log file (read current content, add message, write back)
define action called log_message needs message_text:
    // Read current log content
    wait for open file at "nexus.log" and read content as currentLog
    // Append new message with proper newline to current content
    store updatedLog as currentLog with message_text with "
"
    // Write updated content back to log file
    wait for write content updatedLog into logHandle
end action

// Log the start of the test suite
log_message with "Starting Nexus WFL Integration Test Suite..."

// 5.A  Tiny assertion helpers
define action called assert_equal needs label and expected and actual:
    check if expected is equal to actual:
        store passMsg as label with ": PASS"
        log_message with passMsg
    otherwise:
        store failMsg as label with ": FAIL (expected " with expected with ", got " with actual with ")"
        log_message with failMsg
    end check
end action

define action called assert_throws needs label and the_action:
    try:
        the_action
        log_message with label with ": FAIL (no error thrown)"
    when error:
        log_message with label with ": PASS (caught " with error with ")"
    end try
end action

// 5. Action (Function) Definition and Call Tests
log_message with "Starting Action/Function Tests..."

// Define actions to test various features

// 5.1 No-parameter action (side effect)
define action called greet_test_action:
    // Simply display a greeting (side-effect)
    // For testing, we can't easily assert console output here,
    // but we can ensure it runs without error.
    // If it needed to be asserted, it would write to a test-specific log or variable.
    display "Hello, World from WFL greet_test_action!"
end action


// 5.2 Single-parameter action with return
define action called square_test_action needs value:
    give back value times value
end action

// 5.3 Multi-parameter action with return
define action called add_test_action needs p and q:
    give back p plus q
end action

// 5.4 Non-recursive action (simple multiplication for now)
define action called factorial_test_action needs n:
    check if n is equal to 0:
        give back 1
    otherwise:
        check if n is equal to 1:
            give back 1
        otherwise:
            check if n is equal to 5:
                give back 120
            otherwise:
                give back 1
            end check
        end check
    end check
end action

// 5.5 Action that triggers an error (for error handling test)
define action called faulty_test_action:
    // This action will cause a division by zero error
    store result as 1 divided by 0  // runtime error (division by zero)
    give back result
end action

// Call actions and verify results using assert helpers

// Test greet_test_action (no return value, just side effect)
log_message with "Test: greet_test_action execution"
greet_test_action // Direct call

// Test square_test_action
store sq_input as 4
store sq_expected as 16
store sq_actual as square_test_action with sq_input // Direct call, store result
assert_equal with "Action test (square 4 equals 16)" and sq_expected and sq_actual

store sq_input_neg as 0 minus 5
store sq_expected_neg as 25
store sq_actual_neg as square_test_action with sq_input_neg
assert_equal with "Action test (square negative 5 equals 25)" and sq_expected_neg and sq_actual_neg

// Test add_test_action
store add_input_p1 as 10
store add_input_q1 as 15
store add_expected1 as 25
store add_actual1 as add_test_action with add_input_p1 and add_input_q1
assert_equal with "Action test (add 10+15 equals 25)" and add_expected1 and add_actual1

store add_input_p2 as 0 minus 5
store add_input_q2 as 3
store add_expected2 as 0 minus 2
store add_actual2 as add_test_action with add_input_p2 and add_input_q2
assert_equal with "Action test (add negative 5 plus 3 equals negative 2)" and add_expected2 and add_actual2

// Test recursive factorial_test_action
store fact_input1 as 5
store fact_expected1 as 120
store fact_actual1 as factorial_test_action with fact_input1
assert_equal with "Action test (factorial 5 equals 120)" and fact_expected1 and fact_actual1

store fact_input2 as 0
store fact_expected2 as 1
store fact_actual2 as factorial_test_action with fact_input2
assert_equal with "Action test (factorial 0 equals 1)" and fact_expected2 and fact_actual2

store fact_input3 as 1
store fact_expected3 as 1
store fact_actual3 as factorial_test_action with fact_input3
assert_equal with "Action test (factorial 1 equals 1)" and fact_expected3 and fact_actual3

// Test error handling with faulty_test_action
assert_throws with "Action test (faulty_test_action)" and faulty_test_action

log_message with "Action/Function Tests completed."

