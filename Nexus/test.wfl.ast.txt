AST output for: ./Nexus/test.wfl
==============================================

Program with 5 statements:

Statement #1: OpenFileStatement {
    path: Literal(
        String(
            "nexus.log",
        ),
        9,
        14,
    ),
    variable_name: "logHandle",
    line: 9,
    column: 1,
}

Statement #2: ActionDefinition {
    name: "log_message",
    parameters: [
        Parameter {
            name: "message_text",
            param_type: None,
            default_value: None,
        },
    ],
    body: [
        WaitForStatement {
            inner: ReadFileStatement {
                path: Literal(
                    String(
                        "nexus.log",
                    ),
                    14,
                    27,
                ),
                variable_name: "currentLog",
                line: 14,
                column: 14,
            },
            line: 14,
            column: 5,
        },
        VariableDeclaration {
            name: "updatedLog",
            value: Concatenation {
                left: Variable(
                    "currentLog",
                    16,
                    25,
                ),
                right: Concatenation {
                    left: Variable(
                        "message_text",
                        16,
                        41,
                    ),
                    right: Literal(
                        String(
                            "\\n",
                        ),
                        16,
                        59,
                    ),
                    line: 16,
                    column: 54,
                },
                line: 16,
                column: 36,
            },
            line: 16,
            column: 5,
        },
        WaitForStatement {
            inner: WriteFileStatement {
                file: Variable(
                    "logHandle",
                    18,
                    44,
                ),
                content: Variable(
                    "updatedLog",
                    18,
                    28,
                ),
                mode: Overwrite,
                line: 18,
                column: 5,
            },
            line: 18,
            column: 5,
        },
    ],
    return_type: None,
    line: 22,
    column: 1,
}

Statement #3: ExpressionStatement {
    expression: ActionCall {
        name: "log_message",
        arguments: [
            Argument {
                name: None,
                value: Literal(
                    String(
                        "Starting Nexus WFL Integration Test Suite...",
                    ),
                    22,
                    18,
                ),
            },
        ],
        line: 22,
        column: 1,
    },
    line: 27,
    column: 1,
}

Statement #4: ActionDefinition {
    name: "assert_equal",
    parameters: [
        Parameter {
            name: "label expected actual",
            param_type: None,
            default_value: None,
        },
    ],
    body: [
        IfStatement {
            condition: BinaryOperation {
                left: Variable(
                    "expected",
                    28,
                    14,
                ),
                operator: Equals,
                right: Variable(
                    "actual",
                    28,
                    35,
                ),
                line: 28,
                column: 23,
            },
            then_block: [
                ExpressionStatement {
                    expression: ActionCall {
                        name: "log_message",
                        arguments: [
                            Argument {
                                name: None,
                                value: Concatenation {
                                    left: Variable(
                                        "label",
                                        29,
                                        26,
                                    ),
                                    right: Literal(
                                        String(
                                            ": PASS",
                                        ),
                                        29,
                                        37,
                                    ),
                                    line: 29,
                                    column: 32,
                                },
                            },
                        ],
                        line: 29,
                        column: 9,
                    },
                    line: 30,
                    column: 5,
                },
            ],
            else_block: Some(
                [
                    ExpressionStatement {
                        expression: ActionCall {
                            name: "log_message",
                            arguments: [
                                Argument {
                                    name: None,
                                    value: Concatenation {
                                        left: Variable(
                                            "label",
                                            31,
                                            26,
                                        ),
                                        right: Concatenation {
                                            left: Literal(
                                                String(
                                                    ": FAIL (expected ",
                                                ),
                                                31,
                                                37,
                                            ),
                                            right: Concatenation {
                                                left: Variable(
                                                    "expected",
                                                    31,
                                                    62,
                                                ),
                                                right: Concatenation {
                                                    left: Literal(
                                                        String(
                                                            ", got ",
                                                        ),
                                                        31,
                                                        76,
                                                    ),
                                                    right: Concatenation {
                                                        left: Variable(
                                                            "actual",
                                                            31,
                                                            90,
                                                        ),
                                                        right: Literal(
                                                            String(
                                                                ")",
                                                            ),
                                                            31,
                                                            102,
                                                        ),
                                                        line: 31,
                                                        column: 97,
                                                    },
                                                    line: 31,
                                                    column: 85,
                                                },
                                                line: 31,
                                                column: 71,
                                            },
                                            line: 31,
                                            column: 57,
                                        },
                                        line: 31,
                                        column: 32,
                                    },
                                },
                            ],
                            line: 31,
                            column: 9,
                        },
                        line: 32,
                        column: 5,
                    },
                ],
            ),
            line: 28,
            column: 5,
        },
    ],
    return_type: None,
    line: 35,
    column: 1,
}

Statement #5: ActionDefinition {
    name: "assert_throws",
    parameters: [
        Parameter {
            name: "label the_action",
            param_type: None,
            default_value: None,
        },
    ],
    body: [
        TryStatement {
            body: [
                ExpressionStatement {
                    expression: Variable(
                        "the_action",
                        37,
                        9,
                    ),
                    line: 38,
                    column: 9,
                },
                ExpressionStatement {
                    expression: ActionCall {
                        name: "log_message",
                        arguments: [
                            Argument {
                                name: None,
                                value: Concatenation {
                                    left: Variable(
                                        "label",
                                        38,
                                        26,
                                    ),
                                    right: Literal(
                                        String(
                                            ": FAIL (no error thrown)",
                                        ),
                                        38,
                                        37,
                                    ),
                                    line: 38,
                                    column: 32,
                                },
                            },
                        ],
                        line: 38,
                        column: 9,
                    },
                    line: 39,
                    column: 5,
                },
            ],
            error_name: "error",
            when_block: [
                ExpressionStatement {
                    expression: ActionCall {
                        name: "log_message",
                        arguments: [
                            Argument {
                                name: None,
                                value: Concatenation {
                                    left: Variable(
                                        "label",
                                        40,
                                        26,
                                    ),
                                    right: Concatenation {
                                        left: Literal(
                                            String(
                                                ": PASS (caught ",
                                            ),
                                            40,
                                            37,
                                        ),
                                        right: Concatenation {
                                            left: Variable(
                                                "error",
                                                40,
                                                60,
                                            ),
                                            right: Literal(
                                                String(
                                                    ")",
                                                ),
                                                40,
                                                71,
                                            ),
                                            line: 40,
                                            column: 66,
                                        },
                                        line: 40,
                                        column: 55,
                                    },
                                    line: 40,
                                    column: 32,
                                },
                            },
                        ],
                        line: 40,
                        column: 9,
                    },
                    line: 41,
                    column: 5,
                },
            ],
            otherwise_block: None,
            line: 36,
            column: 5,
        },
    ],
    return_type: None,
    line: 0,
    column: 0,
}

