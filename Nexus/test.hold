// ---------------------------------------------------------------------
// 5.0 Logging helper (using display, as per wfl-actions.md for output)
// ---------------------------------------------------------------------
define action log_message with message_text:
    display "LOG: " with message_text
end action

// ---------------------------------------------------------------------
// 5.A Tiny assertion helpers
// ---------------------------------------------------------------------
define action assert_equal with label and expected and actual:
    if expected is equal to actual:
        log_message with label with ": PASS"
    else:
        log_message with label with ": FAIL (expected " with expected with ", got " with actual with ")"
    end if
end action

define action assert_throws with label and the_action:
    try:
        the_action // Invoke the action directly by its parameter name
        log_message with label with ": FAIL (no error thrown)"
    when error: // Assuming "error" is a generic catch, as per original test intent
        log_message with label with ": PASS (caught '" with error message with "')" // Using 'error message' variable
    end try
end action

///////////////////////////////////////////////////////////////////////////
// 5. Action (Function) Definition and Call Tests
///////////////////////////////////////////////////////////////////////////
log_message with "Starting Action/Function Tests..."

// Define actions to test various features

// 5.1 No-parameter action (side effect)
define action greet_test_action:
    // Simply display a greeting (side-effect)
    display "Hello, World from WFL greet_test_action!"
end action

// 5.2 Single-parameter action with return
define action square_test_action with value:
    provide value times value
end action

// 5.3 Multi-parameter action with return
define action add_test_action with p and q:
    provide p plus q
end action

// 5.4 Recursive action (factorial)
define action factorial_test_action with n:
    if n is equal to 0:
        provide 1
    else:
        // Recursive call
        store n_minus_1 as n minus 1
        store recursive_result as factorial_test_action with n_minus_1
        provide n times recursive_result
    end if
end action

// 5.5 Action that triggers an error (for error handling test)
define action faulty_test_action:
    // This action will cause a division by zero error
    store u as 1
    store v as 0
    store w as u divided by v // runtime error (division by zero)
    provide w
end action

// Call actions and verify results using assert helpers

// Test greet_test_action (no return value, just side effect)
log_message with "Test: greet_test_action execution"
greet_test_action // Direct call

// Test square_test_action
store sq_input as 4
store sq_expected as 16
store sq_actual as square_test_action with sq_input // Direct call, store result
assert_equal with "Action test (square 4 -> 16)" and sq_expected and sq_actual

store sq_input_neg as -5
store sq_expected_neg as 25
store sq_actual_neg as square_test_action with sq_input_neg
assert_equal with "Action test (square -5 -> 25)" and sq_expected_neg and sq_actual_neg

// Test add_test_action
store add_input_p1 as 10
store add_input_q1 as 15
store add_expected1 as 25
store add_actual1 as add_test_action with add_input_p1 and add_input_q1
assert_equal with "Action test (add 10+15 -> 25)" and add_expected1 and add_actual1

store add_input_p2 as -5
store add_input_q2 as 3
store add_expected2 as -2
store add_actual2 as add_test_action with add_input_p2 and add_input_q2
assert_equal with "Action test (add -5+3 -> -2)" and add_expected2 and add_actual2

// Test recursive factorial_test_action
store fact_input1 as 5
store fact_expected1 as 120
store fact_actual1 as factorial_test_action with fact_input1
assert_equal with "Action test (factorial 5 -> 120)" and fact_expected1 and fact_actual1

store fact_input2 as 0
store fact_expected2 as 1
store fact_actual2 as factorial_test_action with fact_input2
assert_equal with "Action test (factorial 0 -> 1)" and fact_expected2 and fact_actual2

store fact_input3 as 1
store fact_expected3 as 1
store fact_actual3 as factorial_test_action with fact_input3
assert_equal with "Action test (factorial 1 -> 1)" and fact_expected3 and fact_actual3 // Changed 'perform assert_equal' to direct call

// Test error handling with faulty_test_action
assert_throws with "Action test (faulty_test_action)" and faulty_test_action // Changed 'perform assert_throws'

log_message with "Action/Function Tests completed."