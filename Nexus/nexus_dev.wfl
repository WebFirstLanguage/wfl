// Nexus WFL Integration Test Script
// This script ("nexus.wfl") performs integration tests of core WFL features.
// It logs progress and results to "nexus.log" for debugging.

///////////////////////////////////////////////////////////////////////////
// 1. Setup: Initialize logging
///////////////////////////////////////////////////////////////////////////

// Open the log file for writing
open file at "nexus.log" as logHandle

// Create/truncate the log file initially with a proper line ending
wait for write content "=== Nexus WFL Integration Test Suite ===
" into logHandle

// Helper: Efficiently append a message line to the log file  
define action called log_message needs message_text:
    // Use append mode for efficient logging - add the message with line ending
    wait for append content message_text with "
" into logHandle
end action

// Log the start of the test suite
log_message with "Starting Nexus WFL Integration Test Suite..."

///////////////////////////////////////////////////////////////////////////
// 2. Variable Assignment & Arithmetic Tests
///////////////////////////////////////////////////////////////////////////
log_message with "Starting Arithmetic Tests..."

store a as 6
store b as 2

// Test addition
store add_result as a plus b        // 6 + 2 = 8
check if add_result is equal to 8:
    log_message with "Addition test: PASS"
otherwise:
    log_message with "Addition test: FAIL (expected 8, got " with add_result with ")"
end check

// Test subtraction
store sub_result as a minus b       // 6 - 2 = 4
check if sub_result is equal to 4:
    log_message with "Subtraction test: PASS"
otherwise:
    log_message with "Subtraction test: FAIL (expected 4, got " with sub_result with ")"
end check

// Test multiplication
store mul_result as a times b       // 6 * 2 = 12
check if mul_result is equal to 12:
    log_message with "Multiplication test: PASS"
otherwise:
    log_message with "Multiplication test: FAIL (expected 12, got " with mul_result with ")"
end check

// Test division (non-zero)
store div_result as a divided by b  // 6 / 2 = 3
check if div_result is equal to 3:
    log_message with "Division test: PASS"
otherwise:
    log_message with "Division test: FAIL (expected 3, got " with div_result with ")"
end check

// Test floating-point division accuracy (5/2 = 2.5)
store x as 5
store y as 2
store frac_result as x divided by y    // 5 / 2 = 2.5
// Check by multiplying result by 2 to see if we get back 5
store comparison_value as frac_result times 2
check if comparison_value is equal to x:
    log_message with "Fractional division test: PASS"
otherwise:
    log_message with "Fractional division test: FAIL (expected 2.5, got " with frac_result with ")"
end check

log_message with "Arithmetic Tests completed."

///////////////////////////////////////////////////////////////////////////
// 3. Control Flow (If/Else) Tests
///////////////////////////////////////////////////////////////////////////
log_message with "Starting Control Flow (If/Else) Tests..."

store m as 10
store n as 5

// Test if-else (true condition)
check if m is greater than n:
    store result1 as "yes"
otherwise:
    store result1 as "no"
end check
check if result1 is equal to "yes":
    log_message with "If condition TRUE branch test: PASS"
otherwise:
    log_message with "If condition TRUE branch test: FAIL (expected yes, got " with result1 with ")"
end check

// Test if-else (false condition)
check if m is less than n:
    store result2 as "yes"
otherwise:
    store result2 as "no"
end check
check if result2 is equal to "no":
    log_message with "If condition FALSE branch test: PASS"
otherwise:
    log_message with "If condition FALSE branch test: FAIL (expected no, got " with result2 with ")"
end check

// Test if (no else branch)
store result3 as "no"
check if m is greater than n:
    change result3 to "yes"
end check
check if result3 is equal to "yes":
    log_message with "If (no else) true-case test: PASS"
otherwise:
    log_message with "If (no else) true-case test: FAIL"
end check

// Test single-line if/then/otherwise
store result4 as "yes"
if m is equal to n then change result4 to "yes" otherwise change result4 to "no"
check if result4 is equal to "no":
    log_message with "Single-line if/then/otherwise test: PASS"
otherwise:
    log_message with "Single-line if/then/otherwise test: FAIL (expected no, got " with result4 with ")"
end check

log_message with "Control Flow (If/Else) Tests completed."


///////////////////////////////////////////////////////////////////////////
// 4. Loop Tests (Count, For-Each, While, Repeat/Until, Forever, Break/Continue)
///////////////////////////////////////////////////////////////////////////
log_message with "Starting Loop Tests..."

// 4.1 Count Loop test
store sum_count as 0
count from 1 to 5:
    change sum_count to sum_count plus count
end count
// Expected sum_count = 1+2+3+4+5 = 15
check if sum_count is equal to 15:
    log_message with "Count loop test (1 to 5 sum): PASS"
otherwise:
    log_message with "Count loop test (expected 15, got " with sum_count with "): FAIL"
end check

// 4.2 For-Each Loop test
create list as numbers
push with numbers and 1
push with numbers and 2
push with numbers and 3

store sum_for_each as 0
for each num in numbers:
    change sum_for_each to sum_for_each plus num
end for

// 4.3 While Loop test
store count1 as 1
store sum_while as 0
repeat while count1 is less than or equal to 5:
    change sum_while to sum_while plus count1
    change count1 to count1 plus 1
end repeat
// Expected sum_while = 15 (same as 1+...+5)
check if sum_while is equal to 15:
    log_message with "While loop test (1 to 5 sum): PASS"
otherwise:
    log_message with "While loop test (expected 15, got " with sum_while with "): FAIL"
end check

// 4.4 Continue (Skip) in loop test â€“ sum of odd numbers 1..5
store count2 as 0
store total_odds as 0
repeat while count2 is less than 5:
    change count2 to count2 plus 1
    // Skip even numbers - use a direct approach that we know works
    check if count2 is equal to 2:
        log_message with "Debug: Skipping even number " with count2
        skip    // (continue to next iteration)
    end check
    
    check if count2 is equal to 4:
        log_message with "Debug: Skipping even number " with count2
        skip    // (continue to next iteration)
    end check
    
    log_message with "Debug: Adding odd number " with count2 with " to total_odds"
    change total_odds to total_odds plus count2
end repeat
// This loop adds only odd numbers 1+3+5 = 9
check if total_odds is equal to 9:
    log_message with "Loop continue/skip test (sum of odds 1-5): PASS"
otherwise:
    log_message with "Loop continue/skip test (expected 9, got " with total_odds with "): FAIL"
end check