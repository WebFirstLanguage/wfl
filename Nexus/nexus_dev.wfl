// Nexus WFL Integration Test Script
// This script ("nexus.wfl") performs integration tests of core WFL features.
// It logs progress and results to "nexus.log" for debugging.

///////////////////////////////////////////////////////////////////////////
// 1. Setup: Initialize logging
///////////////////////////////////////////////////////////////////////////

// Open the log file for writing
open file at "nexus.log" as logHandle

// Create/truncate the log file initially with a proper line ending
wait for write content "=== Nexus WFL Integration Test Suite ===
" into logHandle

// Helper: Efficiently append a message line to the log file  
define action called log_message needs message_text:
    // Use append mode for efficient logging - add the message with line ending
    wait for append content message_text with "
" into logHandle
end action

// Log the start of the test suite
log_message with "Starting Nexus WFL Integration Test Suite..."

///////////////////////////////////////////////////////////////////////////
// 2. Variable Assignment & Arithmetic Tests
///////////////////////////////////////////////////////////////////////////
log_message with "Starting Arithmetic Tests..."

store a as 6
store b as 2

// Test addition
store add_result as a plus b        // 6 + 2 = 8
check if add_result is equal to 8:
    log_message with "Addition test: PASS"
otherwise:
    log_message with "Addition test: FAIL (expected 8, got " with add_result with ")"
end check

// Test subtraction
store sub_result as a minus b       // 6 - 2 = 4
check if sub_result is equal to 4:
    log_message with "Subtraction test: PASS"
otherwise:
    log_message with "Subtraction test: FAIL (expected 4, got " with sub_result with ")"
end check

// Test multiplication
store mul_result as a times b       // 6 * 2 = 12
check if mul_result is equal to 12:
    log_message with "Multiplication test: PASS"
otherwise:
    log_message with "Multiplication test: FAIL (expected 12, got " with mul_result with ")"
end check

// Test division (non-zero)
store div_result as a divided by b  // 6 / 2 = 3
check if div_result is equal to 3:
    log_message with "Division test: PASS"
otherwise:
    log_message with "Division test: FAIL (expected 3, got " with div_result with ")"
end check

// Test floating-point division accuracy (5/2 = 2.5)
store x as 5
store y as 2
store frac_result as x divided by y    // 5 / 2 = 2.5
// Check by multiplying result by 2 to see if we get back 5
store comparison_value as frac_result times 2
check if comparison_value is equal to x:
    log_message with "Fractional division test: PASS"
otherwise:
    log_message with "Fractional division test: FAIL (expected 2.5, got " with frac_result with ")"
end check

log_message with "Arithmetic Tests completed."
