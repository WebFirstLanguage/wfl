// Simplified Rust Line Counter - WFL Implementation
// Counts lines in Rust source files
// 
// This version provides basic line counting functionality
// within WFL's current limitations
//
// Usage: wfl rust_loc_counter_simple.wfl

display "=========================================="
display "RUST CODE LINE COUNT REPORT (Simplified)"
display "=========================================="
display ""

// Initialize totals
store total_files as 0
store total_lines as 0

// Get all files in src directory
try:
    wait for store all_files as list files recursively in "src"
    
    display "Processing Rust files in ./src directory..."
    display ""
    
    // Process each file
    for each file_path in all_files:
        // Check if it's a .rs file by checking the last 3 characters
        store path_length as length of file_path
        check if path_length is greater than 3:
            store last_char as file_path[path_length - 1]
            store second_last as file_path[path_length - 2]  
            store third_last as file_path[path_length - 3]
            
            store file_ext as third_last with second_last with last_char
            
            check if file_ext is ".rs":
                // Count lines in this file
                try:
                    store line_count as count_lines of file_path
                    add 1 to total_files
                    add line_count to total_lines
                    
                    display "  " with file_path with ": " with line_count with " lines"
                    
                when error:
                    display "  Error reading: " with file_path
                end try
            end check
        end check
    end for
    
when error:
    display "Error: Could not list files in ./src directory"
end try

display ""
display "=========================================="
display "SUMMARY:"
display "Total Rust files processed: " with total_files
display "Total lines of code: " with total_lines

check if total_files is greater than 0:
    store avg_lines as total_lines
    divide avg_lines by total_files
    display "Average lines per file: " with avg_lines
end check

display "=========================================="

// Generate markdown report
display ""
display "Generating markdown report..."

try:
    store markdown_report as "# Rust Line Count Report (Simplified)

Generated by WFL Rust Line Counter

## Summary

- **Total Rust files:** "
    
    change markdown_report to markdown_report with total_files with "
- **Total lines:** " with total_lines

    check if total_files is greater than 0:
        store avg as total_lines
        divide avg by total_files
        change markdown_report to markdown_report with "
- **Average lines per file:** " with avg
    end check
    
    change markdown_report to markdown_report with "

---
*This is a simplified report. For detailed analysis including code/comment/blank line breakdown, use the Python version.*
"
    
    // Write markdown report
    open file at "./Docs/rust_loc_report_simple.md" for writing as md_file
    wait for write content markdown_report into md_file
    close file md_file
    
    display "✓ Markdown report written to ./Docs/rust_loc_report_simple.md"
    
when error:
    display "✗ Could not write markdown report"
end try

display ""
display "Analysis complete!"