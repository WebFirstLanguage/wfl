name: Nightly Build

on:
  schedule:
    # Run at 05:00 UTC (00:00 AM America/Chicago during DST, 06:00 UTC during standard time)
    - cron: '0 5 * * *'
  workflow_dispatch:
    inputs:
      previous_sha:
        description: 'Last successful build SHA (leave empty to compare with last nightly release)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always
  SIGNING_SKIP: true

jobs:
  check-for-changes:
    name: Check for changes since last nightly build
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      version:      ${{ steps.version.outputs.version }}
      short_sha:    ${{ steps.version.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        run: |
          type -p gh >/dev/null || (
            sudo apt update &&
            sudo apt install -y gh
          )

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Determine last nightly SHA & decide whether to build
        id: check
        shell: bash
        run: |
          ############################
          # 1. Figure out BASE_SHA  #
          ############################
          if [[ -n "${{ inputs.previous_sha }}" ]]; then
            BASE_SHA="${{ inputs.previous_sha }}"
            echo "Using manual baseline SHA: $BASE_SHA"
          else
            # Pick latest tag that starts with 'nightly-'
            LATEST_TAG=$(gh release list --limit 1 --json tagName \
                         --jq '.[] | select(.tagName | test("^nightly-")) .tagName')

            if [[ -n "$LATEST_TAG" ]]; then
              echo "Latest nightly tag: $LATEST_TAG"
              BASE_SHA=$(gh release view "$LATEST_TAG" \
                           --json targetCommitish -q '.targetCommitish')
            else
              echo "No previous nightly release found."
              BASE_SHA=""
            fi
          fi

          ############################
          # 2. Compare with HEAD     #
          ############################
          HEAD_SHA=$(git rev-parse HEAD)
          echo "HEAD_SHA=$HEAD_SHA"
          echo "BASE_SHA=${BASE_SHA:-<none>}"

          if [[ -z "$BASE_SHA" ]]; then
            echo "First nightly build → will build."
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          else
            # --quiet returns exit‑code 1 if there are differences
            if git diff --quiet "$BASE_SHA" "$HEAD_SHA" -- . ':!*.md'; then
              echo "No code changes since last nightly."
              echo "should_build=false" >> "$GITHUB_OUTPUT"
            else
              echo "Detected code changes."
              echo "should_build=true" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Set nightly version string
        id: version
        shell: bash
        run: |
          DATE=$(date +'%Y%m%d')
          SHORT_SHA=$(git rev-parse --short HEAD)
          VERSION="0.0.0-nightly.${DATE}+${SHORT_SHA}"

          echo "Nightly version: $VERSION"
          echo "version=$VERSION"   >> "$GITHUB_OUTPUT"
          echo "short_sha=$SHORT_SHA" >> "$GITHUB_OUTPUT"

  # ------------------------------------------------------------
  # BUILD JOB (matrix over Windows / Linux / macOS)
  # ------------------------------------------------------------
  build:
    name: Build WFL for ${{ matrix.os }}
    needs: check-for-changes
    if: needs.check-for-changes.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: wfl-${{ needs.check-for-changes.outputs.version }}.msi
            artifact_path: wfl-*.msi
            updater_name: wfl-Updater.exe
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: wfl-${{ needs.check-for-changes.outputs.version }}.tar.gz
            artifact_path: "wfl-*.{tar.gz,deb}"
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: wfl-${{ needs.check-for-changes.outputs.version }}.pkg
            artifact_path: wfl-*.pkg

    steps:
      - uses: actions/checkout@v4

      # GitHub CLI is not needed in build jobs, only in check-for-changes and release jobs
      # Removed unnecessary GitHub CLI installation to speed up builds

      # ---------- Rust toolchain ----------
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Cache Cargo registry + target dir
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.target }}

      # ---------- Platform‑specific packaging helpers ----------
      - name: Install packaging tools (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install wix
          cargo install cargo-wix@0.3.3 --locked

      - name: Install packaging tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-deb@2.12.1 --locked

      - name: Install packaging tools (macOS)
        if: matrix.os == 'macos-latest'
        run: cargo install cargo-bundle@0.6.0 --locked

      # ---------- Build & test ----------
      - name: Build WFL
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Run tests
        run: cargo test --release --locked --target ${{ matrix.target }}

      # ---------- Packaging (Windows) ----------
      - name: Package WFL (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p target/${{ matrix.target }}/release/package
          echo "timeout_seconds = 60"   > target/${{ matrix.target }}/release/package/.wflcfg
          echo "logging_enabled = false" >> target/${{ matrix.target }}/release/package/.wflcfg
          echo "debug_report_enabled = true" >> target/${{ matrix.target }}/release/package/.wflcfg
          echo "log_level = info"       >> target/${{ matrix.target }}/release/package/.wflcfg

          # Placeholder updater
          echo "Updater placeholder" > target/${{ matrix.target }}/release/package/wfl-Updater.exe

          # Build MSI
          cargo wix --no-build \
            --output target/${{ matrix.target }}/release/wfl-${{ needs.check-for-changes.outputs.version }}.msi \
            --define Version=${{ needs.check-for-changes.outputs.version }}

      # ---------- Packaging (Linux) ----------
      - name: Package WFL (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p target/${{ matrix.target }}/release/package
          echo "timeout_seconds = 60"   > target/${{ matrix.target }}/release/package/.wflcfg
          echo "logging_enabled = false" >> target/${{ matrix.target }}/release/package/.wflcfg
          echo "debug_report_enabled = true" >> target/${{ matrix.target }}/release/package/.wflcfg
          echo "log_level = info"       >> target/${{ matrix.target }}/release/package/.wflcfg

          cargo deb --no-build --target ${{ matrix.target }}

          mkdir -p target/${{ matrix.target }}/release/wfl-${{ needs.check-for-changes.outputs.version }}
          cp target/${{ matrix.target }}/release/wfl \
             target/${{ matrix.target }}/release/wfl-${{ needs.check-for-changes.outputs.version }}/
          cp target/${{ matrix.target }}/release/package/.wflcfg \
             target/${{ matrix.target }}/release/wfl-${{ needs.check-for-changes.outputs.version }}/
          tar -C target/${{ matrix.target }}/release -czvf \
             target/${{ matrix.target }}/release/wfl-${{ needs.check-for-changes.outputs.version }}.tar.gz \
             wfl-${{ needs.check-for-changes.outputs.version }}

      # ---------- Packaging (macOS) ----------
      - name: Package WFL (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install Rosetta if running on ARM64 macOS runner
          if [[ "$(uname -m)" == "arm64" ]]; then
            echo "Running on ARM64 macOS, installing Rosetta for x86_64 binary compatibility"
            softwareupdate --install-rosetta --agree-to-license
          fi

          # Create config file
          mkdir -p target/${{ matrix.target }}/release/package
          echo "timeout_seconds = 60"   > target/${{ matrix.target }}/release/package/.wflcfg
          echo "logging_enabled = false" >> target/${{ matrix.target }}/release/package/.wflcfg
          echo "debug_report_enabled = true" >> target/${{ matrix.target }}/release/package/.wflcfg
          echo "log_level = info"       >> target/${{ matrix.target }}/release/package/.wflcfg

          # Bundle the application
          cargo bundle --release --target ${{ matrix.target }} --format osx

          # Verify bundle was created correctly
          echo "Verifying bundle contents..."
          ls -la target/${{ matrix.target }}/release/bundle/osx/WFL.app/Contents/MacOS/ || exit 1
          if [[ ! -f target/${{ matrix.target }}/release/bundle/osx/WFL.app/Contents/MacOS/wfl ]]; then
            echo "ERROR: wfl binary missing from app bundle"
            exit 1
          fi
          
          # Ensure binary is executable
          chmod 755 target/${{ matrix.target }}/release/bundle/osx/WFL.app/Contents/MacOS/wfl

          # Create package root structure
          mkdir -p target/${{ matrix.target }}/release/pkg-root/Applications
          cp -R target/${{ matrix.target }}/release/bundle/osx/WFL.app \
                target/${{ matrix.target }}/release/pkg-root/Applications/
          cp target/${{ matrix.target }}/release/package/.wflcfg \
                target/${{ matrix.target }}/release/pkg-root/Applications/WFL.app/Contents/MacOS/

          # Create symlink in /usr/local/bin
          mkdir -p target/${{ matrix.target }}/release/pkg-root/usr/local/bin
          ln -sf /Applications/WFL.app/Contents/MacOS/wfl \
                 target/${{ matrix.target }}/release/pkg-root/usr/local/bin/wfl
          
          # Verify symlink was created correctly
          echo "Verifying symlink..."
          ls -la target/${{ matrix.target }}/release/pkg-root/usr/local/bin/wfl || exit 1

          # Build the package
          if [[ "$SIGNING_SKIP" == "true" ]]; then
            productbuild --root target/${{ matrix.target }}/release/pkg-root / \
                       target/${{ matrix.target }}/release/wfl-${{ needs.check-for-changes.outputs.version }}.pkg
          else
            productbuild --root target/${{ matrix.target }}/release/pkg-root / \
                       --sign "-" \
                       target/${{ matrix.target }}/release/wfl-${{ needs.check-for-changes.outputs.version }}.pkg
          fi

      # ---------- Smoke tests ----------
      - name: Smoke test installer (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Start-Process msiexec.exe -Wait -ArgumentList "/i target\${{ matrix.target }}\release\wfl-${{ needs.check-for-changes.outputs.version }}.msi /qn"
          "$env:ProgramFiles\WFL\bin\wfl.exe" --version

      - name: Smoke test installer (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          DEB=$(find target/${{ matrix.target }}/release -name "*.deb" | head -n1)
          sudo dpkg -i "$DEB"
          wfl --version
          sudo dpkg -r wfl
          mkdir -p ~/wfl-test
          tar -xzf target/${{ matrix.target }}/release/wfl-${{ needs.check-for-changes.outputs.version }}.tar.gz -C ~/wfl-test
          ~/wfl-test/wfl-${{ needs.check-for-changes.outputs.version }}/wfl --version

      - name: Smoke test installer (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install the package
          sudo installer -pkg target/${{ matrix.target }}/release/wfl-${{ needs.check-for-changes.outputs.version }}.pkg -target /
          
          # Verify installation paths
          echo "Verifying installation..."
          if [[ ! -x /Applications/WFL.app/Contents/MacOS/wfl ]]; then
            echo "ERROR: WFL binary not installed or not executable in /Applications"
            exit 1
          fi
          
          if [[ ! -L /usr/local/bin/wfl ]]; then
            echo "ERROR: Symlink /usr/local/bin/wfl not found"
            exit 1
          fi
          
          # Ensure /usr/local/bin is in PATH (for non-login shell)
          export PATH="/usr/local/bin:${PATH}"
          
          # Test CLI via direct path and via PATH
          echo "Testing direct binary execution..."
          /Applications/WFL.app/Contents/MacOS/wfl --version
          
          echo "Testing symlinked binary execution..."
          wfl --version

      # ---------- Upload artifacts ----------
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_path }}
          if-no-files-found: error

  # ------------------------------------------------------------
  # RELEASE JOB
  # ------------------------------------------------------------
  release:
    name: Create or Update Nightly Release
    needs: [check-for-changes, build]
    if: needs.check-for-changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Tag commit for nightly
        run: |
          DATE=$(date +'%Y-%m-%d')
          TAG="nightly-${DATE}"
          git tag -fa "$TAG" -m "Nightly build $DATE"
          git push -f origin "$TAG"

      - name: Publish or update nightly release
        env:
          VERSION:   ${{ needs.check-for-changes.outputs.version }}
          SHORT_SHA: ${{ needs.check-for-changes.outputs.short_sha }}
        run: |
          TAG="nightly-$(date +'%Y-%m-%d')"
          gh release delete "$TAG" --yes 2>/dev/null || true

          gh release create "$TAG" \
            --title "WFL Nightly Build $(date +'%Y-%m-%d')" \
            --notes "⚠️ Installers are **unsigned** test builds – do not use in production.

          Version: $VERSION
          Commit:  ${{ github.sha }}" \
            --prerelease

          find artifacts -type f \( -name "*.msi" -o -name "*.deb" -o -name "*.tar.gz" -o -name "*.pkg" \) \
            -exec gh release upload "$TAG" {} \;
