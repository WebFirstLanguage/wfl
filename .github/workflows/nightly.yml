name: Nightly Build

on:
  schedule:
    # Run at 05:00 UTC (00:00 AM America/Chicago during DST, 06:00 UTC during standard time)
    - cron: '0 5 * * *'
  workflow_dispatch:
    inputs:
      previous_sha:
        description: 'Last successful build SHA (leave empty to compare with last nightly release)'
        required: false
        type: string
      version_override:
        description: 'Override version number (format: YYYY.MM.patch.build)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always
  SIGNING_SKIP: true
  CACHE_ON_FAILURE: false
  CARGO_INCREMENTAL: 0

jobs:
  check-for-changes:
    name: Check for changes since last nightly build
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      version:      ${{ steps.version.outputs.version }}
      short_sha:    ${{ steps.version.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        run: |
          type -p gh >/dev/null || (
            sudo apt update &&
            sudo apt install -y gh
          )

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Determine last nightly SHA & decide whether to build
        id: check
        shell: bash
        run: |
          ############################
          # 1. Figure out BASE_SHA  #
          ############################
          if [[ -n "${{ inputs.previous_sha }}" ]]; then
            BASE_SHA="${{ inputs.previous_sha }}"
            echo "Using manual baseline SHA: $BASE_SHA"
          else
            # Pick latest tag that starts with 'nightly-'
            LATEST_TAG=$(gh release list --limit 1 --json tagName \
                         --jq '.[] | select(.tagName | test("^nightly-")) .tagName')

            if [[ -n "$LATEST_TAG" ]]; then
              echo "Latest nightly tag: $LATEST_TAG"
              BASE_SHA=$(gh release view "$LATEST_TAG" \
                           --json targetCommitish -q '.targetCommitish')
            else
              echo "No previous nightly release found."
              BASE_SHA=""
            fi
          fi

          ############################
          # 2. Compare with HEAD     #
          ############################
          HEAD_SHA=$(git rev-parse HEAD)
          echo "HEAD_SHA=$HEAD_SHA"
          echo "BASE_SHA=${BASE_SHA:-<none>}"

          if [[ -z "$BASE_SHA" ]]; then
            echo "First nightly build → will build."
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          else
            # --quiet returns exit‑code 1 if there are differences
            if git diff --quiet "$BASE_SHA" "$HEAD_SHA" -- . ':!*.md'; then
              echo "No code changes since last nightly."
              echo "should_build=false" >> "$GITHUB_OUTPUT"
            else
              echo "Detected code changes."
              echo "should_build=true" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Load version from build_meta.json
        id: version
        shell: bash
        run: |
          # Check for version override
          if [[ -n "${{ inputs.version_override }}" ]]; then
            VERSION="${{ inputs.version_override }}"
            echo "Using version override: $VERSION"
          else
            # Read version from .build_meta.json
            YEAR=$(jq -r '.year' .build_meta.json)
            BUILD=$(jq -r '.build' .build_meta.json)
            VERSION="${YEAR}.${BUILD}"
            echo "Using version from build_meta.json: $VERSION"
          fi
          
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "short_sha=$SHORT_SHA" >> "$GITHUB_OUTPUT"

  # ------------------------------------------------------------
  # BUILD JOB (Windows only)
  # ------------------------------------------------------------
  build:
    name: Build WFL for Windows
    needs: check-for-changes
    if: needs.check-for-changes.outputs.should_build == 'true'
    runs-on: windows-latest
    env:
      TARGET: x86_64-pc-windows-msvc
      ARTIFACT_NAME: wfl-${{ needs.check-for-changes.outputs.version }}.msi
      ARTIFACT_PATH: wfl-*.msi
    steps:
      - uses: actions/checkout@v4

      # ---------- Rust toolchain ----------
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ env.TARGET }}
          override: true
          components: rustfmt, clippy

      - name: Cache Cargo registry + target dir
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ env.TARGET }}

      # ---------- Platform‑specific packaging helpers ----------
      - name: Install packaging tools
        run: |
          Write-Host "Installing WiX Toolset..."
          choco install wix --no-progress -y
          
          Write-Host "Installing cargo-wix..."
          cargo install cargo-wix@0.3.3 --locked
          
          # Verify installations
          if (-not ((cargo --list 2>$null) | Select-String -Pattern "wix" -Quiet)) {
            Write-Host "::error::cargo-wix installation failed"
            exit 1
          }
          
          if (-not ((Test-Path "${env:ProgramFiles(x86)}\WiX Toolset*" -ErrorAction SilentlyContinue) -or 
                   (Test-Path "${env:ProgramFiles}\WiX Toolset*" -ErrorAction SilentlyContinue) -or
                   ($null -ne $env:WIX))) {
            Write-Host "::error::WiX Toolset installation failed"
            exit 1
          }

      # ---------- Linting & Format Checking ----------
      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      # ---------- Build & test ----------
      - name: Build WFL and LSP
        run: |
          cargo build --release --locked --target ${{ env.TARGET }} --bin wfl
          cargo build --release --locked --target ${{ env.TARGET }} -p wfl-lsp --bin wfl-lsp

      - name: Run tests
        run: cargo test --release --locked --target ${{ env.TARGET }}

      # ---------- Build VS Code Extension ----------
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Build VS Code Extension
        working-directory: vscode-extension
        run: |
          npm install
          npm install -g typescript
          npm run vscode:prepublish

      # ---------- Initialize WiX Source Files ----------
      - name: Initialize WiX source files
        run: |
          if (-not (Test-Path "wix")) {
            Write-Host "Generating WiX source files..."
            cargo wix init -p wfl
            if ($LASTEXITCODE -ne 0) {
              Write-Host "::error::Failed to initialize WiX source files"
              exit 1
            }
          } else {
            Write-Host "WiX source files already exist"
          }

      # ---------- Packaging (Windows) ----------
      - name: Package WFL
        run: |
          # Create default config file
          Write-Host "Creating default configuration files..."
          New-Item -ItemType Directory -Force -Path target/${{ env.TARGET }}/release/package | Out-Null
          Set-Content -Path "target/${{ env.TARGET }}/release/package/.wflcfg" -Value "timeout_seconds = 60"
          Add-Content -Path "target/${{ env.TARGET }}/release/package/.wflcfg" -Value "logging_enabled = false"
          Add-Content -Path "target/${{ env.TARGET }}/release/package/.wflcfg" -Value "debug_report_enabled = true"
          Add-Content -Path "target/${{ env.TARGET }}/release/package/.wflcfg" -Value "log_level = info"

          # Copy config to root for wix.toml
          Write-Host "Copying configuration to root directory..."
          Copy-Item target/${{ env.TARGET }}/release/package/.wflcfg -Destination .wflcfg

          # Update version in wix.toml
          Write-Host "Updating version in wix.toml..."
          $wixTomlContent = Get-Content -Path "wix.toml" -Raw
          $updatedWixTomlContent = $wixTomlContent -replace 'version = "0.0.0.0" # Will be overridden by cargo-wix command line', 'version = "${{ needs.check-for-changes.outputs.version }}.0.0" # Updated by GitHub Actions'
          Set-Content -Path "wix.toml" -Value $updatedWixTomlContent

          # Verify binaries exist
          Write-Host "Verifying binaries exist..."
          $binaryPath = "target/${{ env.TARGET }}/release/wfl.exe"
          $lspPath = "target/${{ env.TARGET }}/release/wfl-lsp.exe"
          
          if (-not (Test-Path $binaryPath)) {
            Write-Host "::error::Binary not found at expected path: $binaryPath"
            exit 1
          }
          
          if (-not (Test-Path $lspPath)) {
            Write-Host "::error::LSP binary not found at expected path: $lspPath"
            exit 1
          }

          # Build MSI with cargo-wix
          Write-Host "Building MSI installer..."
          cargo wix --no-build --nocapture `
            --output "target/${{ env.TARGET }}/release/wfl-${{ needs.check-for-changes.outputs.version }}.msi" `
            -p wfl

      # ---------- Verify MSI Created Successfully ----------
      - name: Verify installer was created
        run: |
          $msiPath = "target/${{ env.TARGET }}/release/wfl-${{ needs.check-for-changes.outputs.version }}.msi"
          if (-not (Test-Path $msiPath)) {
            Write-Host "::error::MSI installer not found at expected path: $msiPath"
            exit 1
          }
          $msiInfo = Get-Item $msiPath
          Write-Host "MSI created successfully: $($msiInfo.Name), Size: $($msiInfo.Length) bytes"

      # ---------- Smoke tests ----------
      - name: Smoke test installer
        run: |
          try {
            Start-Process msiexec.exe -Wait -ArgumentList "/i target\${{ env.TARGET }}\release\wfl-${{ needs.check-for-changes.outputs.version }}.msi /qn"
            
            if ($LASTEXITCODE -ne 0) {
              Write-Host "::error::MSI installation failed with exit code $LASTEXITCODE"
              exit 1
            }
            
            $wflVersion = & "$env:ProgramFiles\WFL\bin\wfl.exe" --version
            Write-Host "WFL version: $wflVersion"
            
            $lspVersion = & "$env:ProgramFiles\WFL\bin\wfl-lsp.exe" --version
            Write-Host "WFL-LSP version: $lspVersion"
          } catch {
            Write-Host "::error::Smoke test failed: $_"
            exit 1
          }

      # ---------- Upload artifacts ----------
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: target/${{ env.TARGET }}/release/${{ env.ARTIFACT_PATH }}
          if-no-files-found: error

  # ------------------------------------------------------------
  # RELEASE JOB
  # ------------------------------------------------------------
  release:
    name: Create or Update Nightly Release
    needs: [check-for-changes, build]
    if: needs.check-for-changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Verify artifacts
        run: |
          echo "Verifying downloaded artifacts..."
          find artifacts -type f -name "*.msi" -exec ls -la {} \;
          
          if [ $(find artifacts -type f -name "*.msi" | wc -l) -eq 0 ]; then
            echo "::error::No MSI artifacts found in downloaded artifacts directory"
            exit 1
          fi

      - name: Tag commit for nightly
        run: |
          DATE=$(date +'%Y-%m-%d')
          TAG="nightly-${DATE}"
          git tag -fa "$TAG" -m "Nightly build $DATE"
          git push -f origin "$TAG"

      - name: Publish or update nightly release
        env:
          VERSION:   ${{ needs.check-for-changes.outputs.version }}
          SHORT_SHA: ${{ needs.check-for-changes.outputs.short_sha }}
        run: |
          TAG="nightly-$(date +'%Y-%m-%d')"
          gh release delete "$TAG" --yes 2>/dev/null || true

          gh release create "$TAG" \
            --title "WFL Nightly Build $(date +'%Y-%m-%d')" \
            --notes "⚠️ Installers are **unsigned** test builds – do not use in production.

          Version: $VERSION
          Commit:  ${{ github.sha }}" \
            --prerelease

          find artifacts -type f -name "*.msi" -exec gh release upload "$TAG" {} \;
          
          echo "Release created successfully: $TAG"
