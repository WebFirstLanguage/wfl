AST output for: test.wfl
==============================================

Program with 18 statements:

Statement #1: VariableDeclaration {
    name: "a",
    value: Literal(
        Integer(
            6,
        ),
        1,
        12,
    ),
    line: 1,
    column: 1,
}

Statement #2: VariableDeclaration {
    name: "b",
    value: Literal(
        Integer(
            2,
        ),
        2,
        12,
    ),
    line: 2,
    column: 1,
}

Statement #3: OpenFileStatement {
    path: Literal(
        String(
            "nexus.log",
        ),
        6,
        14,
    ),
    variable_name: "logHandle",
    line: 6,
    column: 1,
}

Statement #4: ActionDefinition {
    name: "log_message",
    parameters: [
        Parameter {
            name: "message_text",
            param_type: None,
            default_value: None,
        },
    ],
    body: [
        VariableDeclaration {
            name: "message",
            value: Concatenation {
                left: Variable(
                    "message_text",
                    12,
                    22,
                ),
                right: Literal(
                    String(
                        "\\n",
                    ),
                    12,
                    40,
                ),
                line: 12,
                column: 35,
            },
            line: 12,
            column: 5,
        },
        WaitForStatement {
            inner: WriteFileStatement {
                file: Variable(
                    "logHandle",
                    13,
                    42,
                ),
                content: Variable(
                    "message",
                    13,
                    29,
                ),
                mode: Append,
                line: 13,
                column: 5,
            },
            line: 13,
            column: 5,
        },
    ],
    return_type: None,
    line: 17,
    column: 1,
}

Statement #5: ExpressionStatement {
    expression: ActionCall {
        name: "log_message",
        arguments: [
            Argument {
                name: None,
                value: Literal(
                    String(
                        "Starting Nexus WFL Integration Test Suite...",
                    ),
                    17,
                    18,
                ),
            },
        ],
        line: 17,
        column: 1,
    },
    line: 22,
    column: 1,
}

Statement #6: VariableDeclaration {
    name: "add_result",
    value: BinaryOperation {
        left: Variable(
            "a",
            22,
            21,
        ),
        operator: Plus,
        right: Variable(
            "b",
            22,
            28,
        ),
        line: 22,
        column: 23,
    },
    line: 22,
    column: 1,
}

Statement #7: IfStatement {
    condition: BinaryOperation {
        left: Variable(
            "add_result",
            23,
            10,
        ),
        operator: Equals,
        right: Literal(
            Integer(
                8,
            ),
            23,
            33,
        ),
        line: 23,
        column: 21,
    },
    then_block: [
        DisplayStatement {
            value: Literal(
                String(
                    "yes",
                ),
                24,
                13,
            ),
            line: 25,
            column: 1,
        },
    ],
    else_block: Some(
        [
            DisplayStatement {
                value: Literal(
                    String(
                        "no",
                    ),
                    26,
                    13,
                ),
                line: 27,
                column: 1,
            },
        ],
    ),
    line: 23,
    column: 1,
}

Statement #8: VariableDeclaration {
    name: "sub_result",
    value: BinaryOperation {
        left: Variable(
            "a",
            30,
            21,
        ),
        operator: Minus,
        right: Variable(
            "b",
            30,
            29,
        ),
        line: 30,
        column: 23,
    },
    line: 30,
    column: 1,
}

Statement #9: IfStatement {
    condition: BinaryOperation {
        left: Variable(
            "sub_result",
            31,
            10,
        ),
        operator: Equals,
        right: Literal(
            Integer(
                4,
            ),
            31,
            33,
        ),
        line: 31,
        column: 21,
    },
    then_block: [
        DisplayStatement {
            value: Literal(
                String(
                    "yes",
                ),
                32,
                13,
            ),
            line: 33,
            column: 1,
        },
    ],
    else_block: Some(
        [
            DisplayStatement {
                value: Literal(
                    String(
                        "no",
                    ),
                    34,
                    13,
                ),
                line: 35,
                column: 1,
            },
        ],
    ),
    line: 31,
    column: 1,
}

Statement #10: VariableDeclaration {
    name: "multi_result",
    value: BinaryOperation {
        left: Variable(
            "a",
            38,
            23,
        ),
        operator: Multiply,
        right: Variable(
            "b",
            38,
            31,
        ),
        line: 38,
        column: 25,
    },
    line: 38,
    column: 1,
}

Statement #11: IfStatement {
    condition: BinaryOperation {
        left: Variable(
            "multi_result",
            39,
            10,
        ),
        operator: Equals,
        right: Literal(
            Integer(
                12,
            ),
            39,
            35,
        ),
        line: 39,
        column: 23,
    },
    then_block: [
        DisplayStatement {
            value: Literal(
                String(
                    "yes",
                ),
                40,
                13,
            ),
            line: 41,
            column: 1,
        },
    ],
    else_block: Some(
        [
            DisplayStatement {
                value: Literal(
                    String(
                        "no",
                    ),
                    42,
                    13,
                ),
                line: 43,
                column: 1,
            },
        ],
    ),
    line: 39,
    column: 1,
}

Statement #12: VariableDeclaration {
    name: "div_result",
    value: BinaryOperation {
        left: Variable(
            "a",
            46,
            21,
        ),
        operator: Divide,
        right: Variable(
            "b",
            46,
            34,
        ),
        line: 46,
        column: 23,
    },
    line: 46,
    column: 1,
}

Statement #13: IfStatement {
    condition: BinaryOperation {
        left: Variable(
            "div_result",
            47,
            10,
        ),
        operator: Equals,
        right: Literal(
            Integer(
                3,
            ),
            47,
            33,
        ),
        line: 47,
        column: 21,
    },
    then_block: [
        DisplayStatement {
            value: Literal(
                String(
                    "yes",
                ),
                48,
                13,
            ),
            line: 49,
            column: 1,
        },
    ],
    else_block: Some(
        [
            DisplayStatement {
                value: Literal(
                    String(
                        "no",
                    ),
                    50,
                    13,
                ),
                line: 51,
                column: 1,
            },
        ],
    ),
    line: 47,
    column: 1,
}

Statement #14: VariableDeclaration {
    name: "x",
    value: Literal(
        Integer(
            5,
        ),
        54,
        12,
    ),
    line: 54,
    column: 1,
}

Statement #15: VariableDeclaration {
    name: "y",
    value: Literal(
        Integer(
            2,
        ),
        55,
        12,
    ),
    line: 55,
    column: 1,
}

Statement #16: VariableDeclaration {
    name: "frac_result",
    value: BinaryOperation {
        left: Variable(
            "x",
            56,
            22,
        ),
        operator: Divide,
        right: Variable(
            "y",
            56,
            35,
        ),
        line: 56,
        column: 24,
    },
    line: 56,
    column: 1,
}

Statement #17: VariableDeclaration {
    name: "doubled",
    value: BinaryOperation {
        left: Variable(
            "frac_result",
            57,
            18,
        ),
        operator: Multiply,
        right: Literal(
            Integer(
                2,
            ),
            57,
            36,
        ),
        line: 57,
        column: 30,
    },
    line: 57,
    column: 1,
}

Statement #18: IfStatement {
    condition: BinaryOperation {
        left: Variable(
            "doubled",
            60,
            10,
        ),
        operator: Equals,
        right: Variable(
            "x",
            60,
            30,
        ),
        line: 60,
        column: 18,
    },
    then_block: [
        DisplayStatement {
            value: Literal(
                String(
                    "Fractional division test: PASS",
                ),
                61,
                13,
            ),
            line: 62,
            column: 1,
        },
    ],
    else_block: Some(
        [
            DisplayStatement {
                value: Concatenation {
                    left: Literal(
                        String(
                            "Fractional division test: FAIL (expected 2.5, got ",
                        ),
                        63,
                        13,
                    ),
                    right: Concatenation {
                        left: Variable(
                            "frac_result",
                            63,
                            71,
                        ),
                        right: Literal(
                            String(
                                ")",
                            ),
                            63,
                            88,
                        ),
                        line: 63,
                        column: 83,
                    },
                    line: 63,
                    column: 66,
                },
                line: 64,
                column: 1,
            },
        ],
    ),
    line: 60,
    column: 1,
}

