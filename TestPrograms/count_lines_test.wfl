// Test program for count_lines functionality
// Note: WFL file I/O treats \n as literal text, so we test with single-line files and external files

display "=== WFL Count Lines Test ==="
display ""

// Test 1: Test with this WFL source file itself (which has real newlines)
display "1. Testing count_lines with this WFL source file"
store self_lines as count_lines of "TestPrograms/count_lines_test.wfl"
display "This test file has " with self_lines with " lines"
display "✓ count_lines works with real multi-line files"

// Test 2: Create a single-line test file (WFL limitation)
display ""
display "2. Testing with single-line file created by WFL"
open file at "test_single_line.txt" for writing as test_file
wait for write content "This is a single line file" into test_file
close file test_file

store single_line_count as count_lines of "test_single_line.txt"
display "Single line file has " with single_line_count with " lines"

check if single_line_count is 1:
    display "✓ Single line count is correct"
otherwise:
    display "✗ Single line count is incorrect, expected 1 but got " with single_line_count
end check

// Test 3: Empty file
display ""
display "3. Testing with empty file"
open file at "empty_file.txt" for writing as empty_file
close file empty_file

store empty_count as count_lines of "empty_file.txt"
display "Empty file has " with empty_count with " lines"

check if empty_count is 0:
    display "✓ Empty file line count is correct"
otherwise:
    display "✗ Empty file line count is incorrect, expected 0 but got " with empty_count
end check

// Test 4: File without trailing newline
display ""
display "4. Testing file without trailing newline"
open file at "no_newline.txt" for writing as no_newline_file
wait for write content "Line 1" with "\n" into no_newline_file
wait for append content "Line 2" with "\n" into no_newline_file
wait for append content "Line 3" into no_newline_file  // No newline at end
close file no_newline_file

store no_newline_count as count_lines of "no_newline.txt"
display "File without trailing newline has " with no_newline_count with " lines"

check if no_newline_count is 3:
    display "✓ No trailing newline line count is correct"
otherwise:
    display "✗ No trailing newline line count is incorrect, expected 3 but got " with no_newline_count
end check

// Test 5: Error handling - file that doesn't exist
display ""
display "5. Testing error handling with non-existent file"
try:
    store missing_count as count_lines of "does_not_exist.txt"
    display "✗ Should have failed for non-existent file"
when error:
    display "✓ Correctly caught error for non-existent file"
end try

// Cleanup test files
display ""
display "6. Cleaning up test files"
delete file at "test_line_count.txt"
delete file at "empty_file.txt"
delete file at "no_newline.txt"
display "✓ Test files cleaned up"

display ""
display "=== Count Lines Tests Completed ==="