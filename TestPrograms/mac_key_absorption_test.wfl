// TDD Test: MAC Key Absorption Bug
// This test MUST FAIL initially because MAC mode only uses 16 bytes of derived key
// Following TDD approach - write failing test first
//
// SECURITY ISSUE: MAC mode only uses 16 bytes of derived key instead of full 64 bytes, weakening security
// LOCATION: src/stdlib/crypto.rs:122 - new_with_key function
// EXPECTED FIX: Absorb the complete 64-byte derived key into the cryptographic state

display "=== MAC Key Absorption Bug Test ==="
display "This test validates that MAC mode uses the full 64-byte derived key"
display "instead of only the first 16 bytes, ensuring proper security"
display ""

// Test configuration
display "Testing WFLMAC-256 key absorption with various key sizes..."
display ""

try:
    // Test 1: Short key MAC
    display "Test 1: Short key MAC"
    store short_key as "key"
    store test_message as "Hello, World!"
    store short_mac as wflmac256 of test_message and short_key
    display "Key: \"" with short_key with "\" (length: " with length of short_key with " bytes)"
    display "Message: \"" with test_message with "\""
    display "MAC: " with short_mac
    display ""
    
    // Test 2: Medium key MAC
    display "Test 2: Medium key MAC"
    store medium_key as "this_is_a_medium_length_key_for_testing"
    store medium_mac as wflmac256 of test_message and medium_key
    display "Key: \"" with medium_key with "\" (length: " with length of medium_key with " bytes)"
    display "Message: \"" with test_message with "\""
    display "MAC: " with medium_mac
    display ""
    
    // Test 3: Long key MAC (should use full derived key)
    display "Test 3: Long key MAC"
    store long_key as "this_is_a_very_long_key_that_should_demonstrate_the_full_key_derivation_process_and_absorption"
    store long_mac as wflmac256 of test_message and long_key
    display "Key: \"" with long_key with "\" (length: " with length of long_key with " bytes)"
    display "Message: \"" with test_message with "\""
    display "MAC: " with long_mac
    display ""
    
    // Test 4: Key sensitivity test
    display "Test 4: Key sensitivity test"
    display "Testing that different keys produce different MACs..."
    
    store key1 as "secret_key_1"
    store key2 as "secret_key_2"
    store mac1 as wflmac256 of test_message and key1
    store mac2 as wflmac256 of test_message and key2
    
    display "Key 1: \"" with key1 with "\""
    display "MAC 1: " with mac1
    display "Key 2: \"" with key2 with "\""
    display "MAC 2: " with mac2
    
    check if mac1 is equal to mac2:
        display "❌ ERROR: Different keys produced identical MACs!"
        display "This indicates a serious MAC implementation bug"
    otherwise:
        display "✓ Different keys produce different MACs (expected)"
    end check
    display ""
    
    // Test 5: Key derivation strength test
    display "Test 5: Key derivation strength test"
    display "Testing that key derivation uses full entropy..."
    
    // Keys that differ only in later bytes should produce different MACs
    // if the full derived key is used
    store base_key as "shared_prefix_"
    store key_a as base_key with "ending_A_with_more_data_here"
    store key_b as base_key with "ending_B_with_more_data_here"
    
    store mac_a as wflmac256 of test_message and key_a
    store mac_b as wflmac256 of test_message and key_b
    
    display "Base: \"" with base_key with "\""
    display "Key A: \"" with key_a with "\""
    display "Key B: \"" with key_b with "\""
    display "MAC A: " with mac_a
    display "MAC B: " with mac_b
    
    check if mac_a is equal to mac_b:
        display "❌ ERROR: Keys differing in later bytes produced identical MACs!"
        display "This suggests only the first part of the key is being used"
        display "LIKELY BUG: Only 16 bytes of derived key absorbed instead of full 64 bytes"
    otherwise:
        display "✓ Keys differing in later bytes produce different MACs"
        display "This suggests full key derivation is working correctly"
    end check
    display ""
    
    // Test 6: Current bug demonstration
    display "Test 6: Current Bug Demonstration"
    display "The current implementation has a bug in key absorption:"
    display ""
    
    display "CURRENT BUGGY IMPLEMENTATION (suspected):"
    display "In src/stdlib/crypto.rs around line 122:"
    display "// Only first 16 bytes of derived key are mixed into personalization"
    display "params.personalization.copy_from_slice(&params.derived_key[..16]);"
    display "// The remaining 48 bytes of derived key are ignored!"
    display ""
    
    display "CORRECT IMPLEMENTATION should be:"
    display "// Absorb the complete 64-byte derived key into the state"
    display "state.absorb(&params.derived_key); // All 64 bytes"
    display "// OR mix all 64 bytes into the state initialization"
    display ""
    
    // Test 7: Security implications
    display "Test 7: Security Implications"
    display "Using only 16 bytes of a 64-byte derived key:"
    display "- Reduces effective key strength from 512 bits to 128 bits"
    display "- Wastes the HKDF key derivation process"
    display "- May allow key recovery attacks"
    display "- Violates the principle of using all available entropy"
    display ""
    
    // Test 8: Expected fix validation
    display "Test 8: Expected Fix Validation"
    display "After fixing the bug, the following should be true:"
    display "1. All 64 bytes of derived key should influence the MAC"
    display "2. Keys differing only in later bytes should produce different MACs"
    display "3. MAC security should be equivalent to full key length"
    display "4. HKDF-derived entropy should not be wasted"
    display ""
    
    // Test 9: Regression test data
    display "Test 9: Regression Test Data"
    display "These MACs should change after the fix is applied:"
    
    store regression_keys as create list
    add "test1" to regression_keys
    add "test2" to regression_keys
    add "long_test_key_for_regression" to regression_keys
    store regression_message as "regression test message"
    
    for each reg_key in regression_keys:
        store reg_mac as wflmac256 of regression_message and reg_key
        display "Key: \"" with reg_key with "\" -> MAC: " with reg_mac
    end for
    
    display ""
    display "NOTE: These MAC values should be DIFFERENT after fixing the bug"
    display "because the full 64-byte derived key will be used instead of just 16 bytes"
    display ""
    
    display "Test Status: EXPECTED TO FAIL until key absorption is fixed"
    display "This test documents the MAC key absorption bug and expected fix"

catch:
    display "❌ MAC key absorption test error occurred"
    display "This may indicate the key absorption bug or MAC implementation issues"
end try

display ""
display "=== MAC Key Absorption Test Complete ==="
display ""
display "MAC KEY ABSORPTION BUG SUMMARY:"
display "- Issue: Only 16 bytes of 64-byte derived key used in MAC mode"
display "- Risk: Weakened MAC security, wasted entropy"
display "- Location: src/stdlib/crypto.rs:122 (new_with_key function)"
display "- Fix: Absorb complete 64-byte derived key into cryptographic state"
display "- Test Status: FAILING (as expected for TDD)"
