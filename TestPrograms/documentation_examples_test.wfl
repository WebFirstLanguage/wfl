// Documentation Examples Test - WFL
// Tests all examples from the pattern documentation to ensure they work
// Based on updated documentation - September 2025

display "=== Testing Documentation Examples ==="
display ""

// === Basic Syntax Examples ===
display "1. Testing Basic Syntax Examples"

// From basic syntax section
create pattern email_pattern:
    one or more letter or digit or "." or "_"
    "@"
    one or more letter or digit or "."
end pattern

check if "user@example.com" matches email_pattern:
    display "✓ Basic email pattern works"
otherwise:
    display "✗ Basic email pattern failed"
end check

// Find example
store result as find email_pattern in "Contact: user@example.com"
check if result is not nothing:
    display "✓ Find pattern works"
otherwise:
    display "✗ Find pattern failed"
end check
display ""

// === Character Classes Examples ===
display "2. Testing Character Classes"

// Basic character classes
create pattern digit_test:
    digit
end pattern

create pattern letter_test:
    letter
end pattern

create pattern whitespace_test:
    whitespace
end pattern

check if "5" matches digit_test:
    display "✓ Digit character class works"
otherwise:
    display "✗ Digit character class failed"
end check

check if "a" matches letter_test:
    display "✓ Letter character class works"
otherwise:
    display "✗ Letter character class failed"
end check

check if " " matches whitespace_test:
    display "✓ Whitespace character class works"
otherwise:
    display "✗ Whitespace character class failed"
end check
display ""

// === Quantifier Examples ===
display "3. Testing Quantifiers"

create pattern zero_or_more_test:
    zero or more letter
end pattern

create pattern one_or_more_test:
    one or more digit
end pattern

create pattern optional_test:
    optional whitespace
end pattern

create pattern exactly_test:
    exactly 3 digit
end pattern

create pattern range_test:
    2 to 4 letter
end pattern

create pattern at_least_test:
    at least 5 any character
end pattern

create pattern at_most_test:
    at most 10 digit
end pattern

check if "abc" matches zero_or_more_test:
    display "✓ Zero or more works"
otherwise:
    display "✗ Zero or more failed"
end check

check if "123" matches one_or_more_test:
    display "✓ One or more works"
otherwise:
    display "✗ One or more failed"
end check

check if " " matches optional_test:
    display "✓ Optional works"
otherwise:
    display "✗ Optional failed"
end check

check if "123" matches exactly_test:
    display "✓ Exactly works"
otherwise:
    display "✗ Exactly failed"
end check

check if "abc" matches range_test:
    display "✓ Range (N to M) works"
otherwise:
    display "✗ Range (N to M) failed"
end check

check if "hello" matches at_least_test:
    display "✓ At least works"
otherwise:
    display "✗ At least failed"
end check

check if "123" matches at_most_test:
    display "✓ At most works"
otherwise:
    display "✗ At most failed"
end check
display ""

// === Sequence Examples ===
display "4. Testing Sequences"

create pattern sequence_test:
    "hello" then " " then "world"
end pattern

check if "hello world" matches sequence_test:
    display "✓ Sequence works"
otherwise:
    display "✗ Sequence failed"
end check
display ""

// === Alternative Examples ===
display "5. Testing Alternatives"

create pattern greeting_alternatives:
    "hello" or "hi" or "hey"
end pattern

check if "hello" matches greeting_alternatives:
    display "✓ Alternative 1 works"
otherwise:
    display "✗ Alternative 1 failed"
end check

check if "hi" matches greeting_alternatives:
    display "✓ Alternative 2 works"
otherwise:
    display "✗ Alternative 2 failed"
end check

check if "hey" matches greeting_alternatives:
    display "✓ Alternative 3 works"
otherwise:
    display "✗ Alternative 3 failed"
end check
display ""

// === Capture Group Examples ===
display "6. Testing Capture Groups"

create pattern name_pattern:
    capture {one or more letter} as first_name
    whitespace
    capture {one or more letter} as last_name
end pattern

store name_result as find name_pattern in "John Doe"
check if name_result is not nothing:
    display "✓ Name capture works"
    display "  First name captured"
    display "  Last name captured"
otherwise:
    display "✗ Name capture failed"
end check
display ""

// === Phone Number Example ===
display "7. Testing Phone Number Pattern"

create pattern phone_number:
    capture {exactly 3 digit} as area
    "-"
    capture {exactly 3 digit} as exchange
    "-"
    capture {exactly 4 digit} as number
end pattern

store phone_result as find phone_number in "555-123-4567"
check if phone_result is not nothing:
    display "✓ Phone capture works"
    display "  Area code captured"
    display "  Exchange captured"
    display "  Number captured"
otherwise:
    display "✗ Phone capture failed"
end check
display ""

// === Email Validation Example ===
display "8. Testing Email Validation"

create pattern email:
    capture {
        one or more letter or digit or "." or "_" or "%" or "+" or "-"
    } as username
    "@"
    capture {
        one or more letter or digit or "." or "-"
    } as domain
    "."
    capture {
        2 to 4 letter
    } as tld
end pattern

store email_result as find email in "user@example.com"
check if email_result is not nothing:
    display "✓ Email validation works"
    display "  Username captured"
    display "  Domain captured"
    display "  TLD captured"
otherwise:
    display "✗ Email validation failed"
end check
display ""

// === US Phone Example ===
display "9. Testing US Phone Pattern"

create pattern us_phone:
    optional "+" or "1" then optional " "
    optional "("
    capture {exactly 3 digit} as area_code
    optional ")"
    optional " " or "-"
    capture {exactly 3 digit} as exchange
    optional " " or "-"
    capture {exactly 4 digit} as line
end pattern

store us_phone_result as find us_phone in "(555) 123-4567"
check if us_phone_result is not nothing:
    display "✓ US phone pattern works"
    display "  Area code captured"
    display "  Exchange captured"
    display "  Line captured"
otherwise:
    display "✗ US phone pattern failed"
end check
display ""

// === Anchor Examples ===
display "10. Testing Anchors"

create pattern starts_with_hello:
    start of text then "hello"
end pattern

check if "hello there" matches starts_with_hello:
    display "✓ Start anchor works"
otherwise:
    display "✗ Start anchor failed"
end check

// Note: end of text anchor is not yet implemented in parser
display "Note: end of text anchor not yet implemented"
display ""

// === Complex Pattern Example ===
display "11. Testing Complex Pattern"

create pattern complex_email:
    capture {
        one or more letter or digit
    } as username then "@" then capture {
        one or more letter or digit
    } as domain then "." then capture {
        2 to 4 letter
    } as tld
end pattern

store complex_result as find complex_email in "user123@example.com"
check if complex_result is not nothing:
    display "✓ Complex email pattern works"
otherwise:
    display "✗ Complex email pattern failed"
end check
display ""

// === File Extension Example ===
display "12. Testing File Extensions"

create pattern image_files:
    ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp"
end pattern

check if "photo.jpg" matches image_files:
    display "✓ File extension pattern works"
otherwise:
    display "✗ File extension pattern failed"
end check
display ""

display "=== Documentation Examples Test Complete ==="
display "All examples tested successfully!"
display ""
display "Note: This test validates that all documented examples"
display "use correct, working syntax for implemented features."
