// Test for Rust Line Counter - WFL Implementation
// This test must FAIL initially to establish TDD baseline

display "=== Rust Line Counter Test (Should FAIL initially) ==="
display ""

// Test the main rust_loc_counter action
try:
    // This will fail because rust_loc_counter.wfl doesn't exist yet
    store result as run_rust_loc_counter with "./test_rust_files"
    
    // Check that result contains expected statistics
    check if result contains "Total files processed":
        display "✓ Found total files count"
    otherwise:
        display "✗ Missing total files count"
    end check
    
    check if result contains "Code lines":
        display "✓ Found code lines count"
    otherwise:
        display "✗ Missing code lines count"  
    end check
    
    display "Test completed successfully"
    
when error:
    display "✗ EXPECTED FAILURE: rust_loc_counter not implemented yet"
    display "This test establishes the TDD baseline"
end try

display ""
display "=== Test Files Creation ==="

// Create test directory for sample Rust files
try:
    makedirs of "test_rust_files"
    display "✓ Created test directory"
when error:
    display "Test directory already exists or creation failed"
end try

// Create test .rs file with different line types
open file at "test_rust_files/sample.rs" for writing as test_file
wait for write content "// Single line comment
fn main() {
    println!(\"Hello, world!\");  // Inline comment
    
    /* Multi-line
       comment block */
    let x = 42;
    
    /*
     * Another multi-line
     * comment style
     */
    
    let y = /* inline block */ x + 1;
}

// Another comment

fn test() {
    // Function body
}" into test_file
close file test_file

display "✓ Created sample.rs test file"

// Create another test file for directory statistics  
makedirs of "test_rust_files/subdir"
open file at "test_rust_files/subdir/lib.rs" for writing as lib_file
wait for write content "//! Documentation comment
pub fn add(a: i32, b: i32) -> i32 {
    a + b
}

/**
 * Multi-line doc comment
 */
pub fn subtract(a: i32, b: i32) -> i32 {
    a - b
}" into lib_file  
close file lib_file

display "✓ Created subdir/lib.rs test file"

display ""
display "Test files created. Ready for TDD implementation."