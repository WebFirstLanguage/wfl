// Test recursive listing with multiple extensions

display "=== Testing Recursive Listing with Multiple Extensions ==="
display ""

// Test 1: Recursive with multiple extensions inline
display "Test 1: Find all .rs and .toml files recursively in src"
store codeFiles as list files in "./src" recursively with extensions [".rs" and ".toml"]
store codeCount as 0
for each f in codeFiles:
    change codeCount to codeCount plus 1
end for
display "Found " with codeCount with " Rust and TOML files"
display ""

// Test 2: Using a variable with extension list
display "Test 2: Using extension list variable for Docs"
store docExtensions as [".md" and ".txt"]
store docFiles as list files in "./Docs" recursively with extensions docExtensions
store docCount as 0
for each f in docFiles:
    change docCount to docCount plus 1
end for
display "Found " with docCount with " documentation files"
display ""

// Test 3: Four extensions at once
display "Test 3: Find config and data files with 4 extensions"
store configExts as [".toml" and ".json" and ".yml" and ".yaml"]
store configFiles as list files in "." with extensions configExts
store configCount as 0
display "Config files found:"
for each f in configFiles:
    change configCount to configCount plus 1
    display "  " with f
end for
display "Total: " with configCount with " files"
display ""

// Test 4: Demonstrate that variable works correctly
display "Test 4: Reusing extension list variable"
store webExts as [".html" and ".css" and ".js"]
store webFiles as list files in "./vscode-extension" recursively with extensions webExts
store webCount as 0
for each f in webFiles:
    change webCount to webCount plus 1
end for
display "Found " with webCount with " web files in vscode-extension"
display ""

display "=== All tests completed successfully ==="
display ""
display "Summary: Multiple extension filtering now works with:"
display "  - Inline lists: extensions ['.ext1' and '.ext2' and '.ext3']"
display "  - Variables: store exts as ['.ext1' and '.ext2'] then use extensions exts"
display "  - Works with both recursive and non-recursive listing"