// Test program for "exactly N" pattern syntax
create pattern id_number:
    exactly 3 digits
    then "-"
    then exactly 3 digits
    then "-"
    then exactly 3 digits
end pattern

// Test valid ID numbers
store test1 as "123-456-789"
store test2 as "000-000-000"
store test3 as "999-123-456"

// Test invalid ID numbers
store test4 as "12-345-678"  // First part only 2 digits
store test5 as "123456789"   // Missing dashes
store test6 as "abc-def-ghi" // Letters instead of digits

// Check valid IDs
check if test1 matches pattern id_number:
    display "✓ " with test1 with " is a valid ID"
otherwise:
    display "✗ " with test1 with " is NOT a valid ID"
end check

check if test2 matches pattern id_number:
    display "✓ " with test2 with " is a valid ID"
otherwise:
    display "✗ " with test2 with " is NOT a valid ID"
end check

check if test3 matches pattern id_number:
    display "✓ " with test3 with " is a valid ID"
otherwise:
    display "✗ " with test3 with " is NOT a valid ID"
end check

// Check invalid IDs (should NOT match)
check if test4 matches pattern id_number:
    display "✗ " with test4 with " incorrectly matched as valid ID"
otherwise:
    display "✓ " with test4 with " correctly rejected"
end check

check if test5 matches pattern id_number:
    display "✗ " with test5 with " incorrectly matched as valid ID"
otherwise:
    display "✓ " with test5 with " correctly rejected"
end check

check if test6 matches pattern id_number:
    display "✗ " with test6 with " incorrectly matched as valid ID"
otherwise:
    display "✓ " with test6 with " correctly rejected"
end check

// Test other quantifier syntax
create pattern zip_code:
    exactly 5 digits
    optional (
        "-" then exactly 4 digits
    )
end pattern

store zip1 as "12345"
store zip2 as "12345-6789"
store zip3 as "123"  // Too short

check if zip1 matches pattern zip_code:
    display "✓ " with zip1 with " is a valid ZIP code"
otherwise:
    display "✗ " with zip1 with " is NOT a valid ZIP code"
end check

check if zip2 matches pattern zip_code:
    display "✓ " with zip2 with " is a valid ZIP+4 code"
otherwise:
    display "✗ " with zip2 with " is NOT a valid ZIP+4 code"
end check

check if zip3 matches pattern zip_code:
    display "✗ " with zip3 with " incorrectly matched as valid ZIP"
otherwise:
    display "✓ " with zip3 with " correctly rejected as ZIP"
end check

// Test "at least" and "at most" syntax
create pattern password:
    at least 8 of any character
end pattern

store pw1 as "short"      // Too short
store pw2 as "longpassword123"  // Valid

check if pw1 matches pattern password:
    display "✗ " with pw1 with " incorrectly accepted"
otherwise:
    display "✓ Short password correctly rejected"
end check

check if pw2 matches pattern password:
    display "✓ Long password accepted"
otherwise:
    display "✗ Long password incorrectly rejected"
end check

// Test "N to M" syntax  
// Note: Without anchors, this will match partial strings
create pattern username:
    3 to 10 of (any letter or digit)
end pattern

store user1 as "ab"        // Too short
store user2 as "alice"     // Valid
store user3 as "verylongusername"  // Too long

check if user1 matches pattern username:
    display "✗ Short username incorrectly accepted"
otherwise:
    display "✓ Short username correctly rejected"
end check

check if user2 matches pattern username:
    display "✓ Valid username accepted"
otherwise:
    display "✗ Valid username incorrectly rejected"
end check

check if user3 matches pattern username:
    display "✗ Long username incorrectly accepted"
otherwise:
    display "✓ Long username correctly rejected"
end check

display ""
display "All pattern tests completed!"